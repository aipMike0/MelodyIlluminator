/* --COPYRIGHT--,BSD
 * Copyright (c) 2015, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * --/COPYRIGHT--*/
//****************************************************************************
//
// main.c - MSP-EXP432P401R + Educational Boosterpack MkII - Microphone FFT
//
//          CMSIS DSP Software Library is used to perform 512-point FFT on
//          the audio samples collected with MSP432's ADC14 from the Education
//          Boosterpack's onboard microhpone. The resulting frequency bin data
//          is displayed on the BoosterPack's 128x128 LCD.
//
//****************************************************************************

#include <ti/devices/msp432p4xx/inc/msp.h>
#include <ti/devices/msp432p4xx/driverlib/driverlib.h>
#include <ti/grlib/grlib.h>
#include "LcdDriver/Crystalfontz128x128_ST7735.h"
#include <stdio.h>

#define ARM_MATH_CM4

#include <arm_math.h>
#include <arm_const_structs.h>

#define TEST_LENGTH_SAMPLES 512
#define SAMPLE_LENGTH 512

/* ------------------------------------------------------------------
 * Global variables for FFT Bin Example
 * ------------------------------------------------------------------- */
uint32_t fftSize = SAMPLE_LENGTH;
uint32_t ifftFlag = 0;
uint32_t doBitReverse = 1;
volatile arm_status status;

/* Graphic library context */
Graphics_Context g_sContext;

#define SMCLK_FREQUENCY     48000000
#define SAMPLE_FREQUENCY    8000
#define AMPLITUDE_MAX 2047

// Définition des indices de fréquence pour les plages
/*
#define LOW_FREQ_START_INDEX  (20 * SAMPLE_LENGTH / SAMPLE_FREQUENCY)
#define LOW_FREQ_END_INDEX    (200 * SAMPLE_LENGTH / SAMPLE_FREQUENCY)
#define MID_FREQ_START_INDEX  (200 * SAMPLE_LENGTH / SAMPLE_FREQUENCY)
#define MID_FREQ_END_INDEX    (1500 * SAMPLE_LENGTH / SAMPLE_FREQUENCY)
#define HIGH_FREQ_START_INDEX (1500 * SAMPLE_LENGTH / SAMPLE_FREQUENCY)
#define HIGH_FREQ_END_INDEX   (8000 * SAMPLE_LENGTH / SAMPLE_FREQUENCY)
*/
// Définition des indices de fréquence pour les plages
#define LOW_FREQ_START_INDEX  (20 * SAMPLE_LENGTH / SAMPLE_FREQUENCY)
#define LOW_FREQ_END_INDEX    (600 * SAMPLE_LENGTH / SAMPLE_FREQUENCY)
#define MID_FREQ_START_INDEX  (600 * SAMPLE_LENGTH / SAMPLE_FREQUENCY)
#define MID_FREQ_END_INDEX    (7000 * SAMPLE_LENGTH / SAMPLE_FREQUENCY)


// Seuils pour l'activation des LED
#define LOW_INTENSITY_THRESHOLD  300

#define HIGH_INTENSITY_THRESHOLD 300


#define LED_1 BIT4  // Port 2.4
#define LED_2 BIT5  // Port 2.5
#define LED_3 BIT6
#define LED_4 BIT1


/* DMA Control Table */
#if defined(__TI_COMPILER_VERSION__)
#pragma DATA_ALIGN(MSP_EXP432P401RLP_DMAControlTable, 1024)
#elif defined(__IAR_SYSTEMS_ICC__)
#pragma data_alignment=1024
#elif defined(__GNUC__)
__attribute__ ((aligned (1024)))
#elif defined(__CC_ARM)
__align(1024)
#endif
static DMA_ControlTable MSP_EXP432P401RLP_DMAControlTable[32];

/* FFT data/processing buffers*/
float hann[SAMPLE_LENGTH];
int16_t data_array1[SAMPLE_LENGTH];
int16_t data_array2[SAMPLE_LENGTH];
int16_t data_input[SAMPLE_LENGTH * 2];
int16_t data_output[SAMPLE_LENGTH];

volatile int switch_data = 0;

//uint32_t color = 0;

/* Timer_A PWM Configuration Parameter */
Timer_A_PWMConfig pwmConfig =
{
    TIMER_A_CLOCKSOURCE_SMCLK,
    TIMER_A_CLOCKSOURCE_DIVIDER_1,
    (SMCLK_FREQUENCY / SAMPLE_FREQUENCY),
    TIMER_A_CAPTURECOMPARE_REGISTER_1,
    TIMER_A_OUTPUTMODE_SET_RESET,
    (SMCLK_FREQUENCY / SAMPLE_FREQUENCY) / 2
};

// Fonction pour calculer l'amplitude maximale du signal
int16_t calculateMaxAmplitude() {
    int i = 0;
    int16_t maxAmplitude = 0;
    for (i = 0; i < SAMPLE_LENGTH; i++) {
        int16_t amplitude = abs(data_array1[i]); // ou data_array2 selon le buffer actif
        if (amplitude > maxAmplitude) {
            maxAmplitude = amplitude;
        }
    }
    return maxAmplitude;
}
/*
uint32_t CalculatePWMDutyCycle(uint32_t maxValue) {
    if (maxValue >= 1000) {
        return (SMCLK_FREQUENCY / SAMPLE_FREQUENCY); // 100% duty cycle
    } else {
        // Calcul proportionnel pour les valeurs inférieures
        return (maxValue * (SMCLK_FREQUENCY / SAMPLE_FREQUENCY)) / 1000;
    }
}
*/

int main(void)
{
    // Configuration des broches de sortie pour les LEDs
       // P2->DIR |= LED_1 | LED_2 | LED_3;
        //P2->DIR =LED_1; //pour varier l'intensité

        // Configuration de la broche P2.5  et P2.4 en tant que sorties

        P2->DIR |= BIT5;
           P2->DIR |= BIT4;
            P2->DIR |= BIT6;
            P2->DIR |= BIT1;
     //P2->DIR |= LED_1 | LED_2 | LED_3;

            // Configuration de la broche P2.5 et P2.4 pour la fonction alternative 2 (Timer_A0)

     P2->SEL0 |= BIT5; P2->SEL1 &= ~BIT5;
            //P2->SEL0 |= BIT4; P2->SEL1 &= ~BIT4;
            P2->SEL0 |= BIT6; P2->SEL1 &= ~BIT6;



            // Étape 2: Configurer Timer_A0 pour la modulation de largeur d'impulsion (PWM)
            TIMER_A0->CTL = TIMER_A_CTL_SSEL__SMCLK | // SMCLK comme source d'horloge
                            TIMER_A_CTL_MC__UP |      // Mode de comptage en montée
                            TIMER_A_CTL_CLR;          // Effacer le Timer

            TIMER_A0->CCR[0] = 1000 - 1; // Période du PWM (définir en fonction de la fréquence souhaitée)

            // Configurer les canaux pour la sortie PWM
            // Pour P2.4 (LED connectée à CCR[1])
           // TIMER_A0->CCTL[1] = TIMER_A_CCTLN_OUTMOD_7; // Mode de sortie Reset/Set pour PWM
           // TIMER_A0->CCR[1] = 500; // Valeur initiale du rapport cyclique (50%)

            // Pour P2.5 (LED connectée à CCR[2])
            TIMER_A0->CCTL[2] = TIMER_A_CCTLN_OUTMOD_7; // Mode de sortie Reset/Set pour PWM
            TIMER_A0->CCR[2] = 500; // Valeur initiale du rapport cyclique (50%)

            // Pour P2.6 (LED connectée à CCR[3])
            TIMER_A0->CCTL[3] = TIMER_A_CCTLN_OUTMOD_7; // Mode de sortie Reset/Set pour PWM
            TIMER_A0->CCR[3] = 500; // Valeur initiale du rapport cyclique (50%)



    /* Halting WDT and disabling master interrupts */
    MAP_WDT_A_holdTimer();
    MAP_Interrupt_disableMaster();

    /* Set the core voltage level to VCORE1 */
    MAP_PCM_setCoreVoltageLevel(PCM_VCORE1);

    /* Set 2 flash wait states for Flash bank 0 and 1*/
    MAP_FlashCtl_setWaitState(FLASH_BANK0, 2);
    MAP_FlashCtl_setWaitState(FLASH_BANK1, 2);

    /* Initializes Clock System */
    MAP_CS_setDCOCenteredFrequency(CS_DCO_FREQUENCY_48);
    MAP_CS_initClockSignal(CS_MCLK, CS_DCOCLK_SELECT, CS_CLOCK_DIVIDER_1);
    MAP_CS_initClockSignal(CS_HSMCLK, CS_DCOCLK_SELECT, CS_CLOCK_DIVIDER_1);
    MAP_CS_initClockSignal(CS_SMCLK, CS_DCOCLK_SELECT, CS_CLOCK_DIVIDER_1);
    MAP_CS_initClockSignal(CS_ACLK, CS_REFOCLK_SELECT, CS_CLOCK_DIVIDER_1);






    // Initialize Hann Window
    int n;
    for(n = 0; n < SAMPLE_LENGTH; n++)
    {
        hann[n] = 0.5f - 0.5f * cosf((2 * PI * n) / (SAMPLE_LENGTH - 1));
    }

    /* Configuring Timer_A to have a period of approximately 500ms and
     * an initial duty cycle of 10% of that (3200 ticks)  */
    Timer_A_generatePWM(TIMER_A0_BASE, &pwmConfig);

    /* Initializing ADC (MCLK/1/1) */
    ADC14_enableModule();
    ADC14_initModule(ADC_CLOCKSOURCE_MCLK, ADC_PREDIVIDER_1, ADC_DIVIDER_1, 0);

    ADC14_setSampleHoldTrigger(ADC_TRIGGER_SOURCE1, false);

    /* Configuring GPIOs (4.3 A10) */
    GPIO_setAsPeripheralModuleFunctionInputPin(GPIO_PORT_P4, GPIO_PIN3,
                                               GPIO_TERTIARY_MODULE_FUNCTION);

    /* Configuring ADC Memory */
    ADC14_configureSingleSampleMode(ADC_MEM0, true);
    ADC14_configureConversionMemory(ADC_MEM0, ADC_VREFPOS_AVCC_VREFNEG_VSS,
                                    ADC_INPUT_A10, false);

    /* Set ADC result format to signed binary */
    ADC14_setResultFormat(ADC_SIGNED_BINARY);

    /* Configuring DMA module */
    DMA_enableModule();
    DMA_setControlBase(MSP_EXP432P401RLP_DMAControlTable);

    DMA_disableChannelAttribute(DMA_CH7_ADC14,
                                UDMA_ATTR_ALTSELECT | UDMA_ATTR_USEBURST |
                                UDMA_ATTR_HIGH_PRIORITY |
                                UDMA_ATTR_REQMASK);

    /* Setting Control Indexes. In this case we will set the source of the
     * DMA transfer to ADC14 Memory 0
     *  and the destination to the
     * destination data array. */
    DMA_setChannelControl(
        UDMA_PRI_SELECT | DMA_CH7_ADC14,
        UDMA_SIZE_16 | UDMA_SRC_INC_NONE |
        UDMA_DST_INC_16 | UDMA_ARB_1);
    DMA_setChannelTransfer(UDMA_PRI_SELECT | DMA_CH7_ADC14,
                               UDMA_MODE_PINGPONG, (void*) &ADC14->MEM[0],
                               data_array1, SAMPLE_LENGTH);

    DMA_setChannelControl(
        UDMA_ALT_SELECT | DMA_CH7_ADC14,
        UDMA_SIZE_16 | UDMA_SRC_INC_NONE |
        UDMA_DST_INC_16 | UDMA_ARB_1);
    DMA_setChannelTransfer(UDMA_ALT_SELECT | DMA_CH7_ADC14,
                               UDMA_MODE_PINGPONG, (void*) &ADC14->MEM[0],
                               data_array2, SAMPLE_LENGTH);

    /* Assigning/Enabling Interrupts */
    DMA_assignInterrupt(DMA_INT1, 7);
    Interrupt_enableInterrupt(INT_DMA_INT1);
    DMA_assignChannel(DMA_CH7_ADC14);
    DMA_clearInterruptFlag(7);
    Interrupt_enableMaster();

    /* Now that the DMA is primed and setup, enabling the channels. The ADC14
     * hardware should take over and transfer/receive all bytes */
    DMA_enableChannel(7);
    ADC14_enableConversion();


    while(1)
    {
        PCM_gotoLPM0();

        int i = 0;

        /* Computer real FFT using the completed data buffer */
        if(switch_data & 1)
        {
            for(i = 0; i < 512; i++)
            {
                data_array1[i] = (int16_t)(hann[i] * data_array1[i]);
            }
            arm_rfft_instance_q15 instance;
            status = arm_rfft_init_q15(&instance, fftSize, ifftFlag,
                                       doBitReverse);

            arm_rfft_q15(&instance, data_array1, data_input);
        }
        else
        {
            for(i = 0; i < 512; i++)
            {
                data_array2[i] = (int16_t)(hann[i] * data_array2[i]);
            }
            arm_rfft_instance_q15 instance;
            status = arm_rfft_init_q15(&instance, fftSize, ifftFlag,
                                       doBitReverse);

            arm_rfft_q15(&instance, data_array2, data_input);
        }

        /* Calculate magnitude of FFT complex output */


        for(i = 0; i < 1024; i += 2)
                {
                    data_output[i /
                                2] =
                        (int32_t)(sqrtf((data_input[i] *
                                         data_input[i]) +
                                        (data_input[i + 1] * data_input[i + 1])));
                }


                        q15_t maxValue;
                        uint32_t maxIndex = 0;
                        //arm_max_q15(data_output, fftSize, &maxValue, &maxIndex);

                      arm_max_q15(data_output, fftSize, &maxValue, &maxIndex);
                      if (maxValue>1000){
                       // Allumer LED1 pour valeurs trop importantes
                       P2->OUT = LED_1;
                         }
                      else {

                    P2->OUT = LED_4;
                     }

                      // printf("Max Value: %d\n", maxValue);


                        // Trouver la valeur maximale dans chaque plage de fréquences

                            q15_t lowMaxValue = 0, midMaxValue = 0, highMaxValue = 0;
                            for (i = LOW_FREQ_START_INDEX; i <= LOW_FREQ_END_INDEX; i++) {
                                if (data_output[i] > lowMaxValue) lowMaxValue = data_output[i];
                            }
                            for (i = MID_FREQ_START_INDEX; i <= MID_FREQ_END_INDEX; i++) {
                                if (data_output[i] > midMaxValue) midMaxValue = data_output[i];
                            }
                           /* for (i = HIGH_FREQ_START_INDEX; i <= HIGH_FREQ_END_INDEX; i++) {
                                if (data_output[i] > highMaxValue) highMaxValue = data_output[i];
                            }*/

                            //printf("Max low Value: %d, Max mid Value: %d, Max high Value: %d\n", lowMaxValue,midMaxValue,highMaxValue);
                           printf("Max low Value: %d, Max mid Value: %d\n", lowMaxValue,midMaxValue);

                            // Calculer le rapport cyclique pour chaque LED
                            uint32_t dutyCycleLow = (lowMaxValue >= 600) ? 1000 : (lowMaxValue * 1000) / 600;
                            uint32_t dutyCycleMid = (midMaxValue >= 600) ? 1000 : (midMaxValue * 100) / 600;
                           // uint32_t dutyCycleHigh = (highMaxValue >= 800) ? 1000 : (highMaxValue * 1000) / 800;

                            // Configurer les registres CCR pour chaque LED
                            //TIMER_A0->CCR[1] = (dutyCycleHigh * TIMER_A0->CCR[0]) / 1000; // LED_1 (Aigus)
                            TIMER_A0->CCR[2] = (dutyCycleMid * TIMER_A0->CCR[0]) / 1000;  // LED_2 (Mediums)
                           TIMER_A0->CCR[3] = (dutyCycleLow * TIMER_A0->CCR[0]) / 1000;  // LED_3 (Graves)


                            //_delay_cycles(500); // Délai pour observer la variation





                        /* Contrôle des LEDs basé sur la fréquence */
/*
                           float dominantFrequency = (float)maxIndex * SAMPLE_FREQUENCY / fftSize;

                           if (dominantFrequency < 200.0) {
                               // Allumer LED3 pour les graves
                               P2->OUT = LED_3;
                           } else if (dominantFrequency >= 200.0 && dominantFrequency < 2000.0) {
                               // Allumer LED2 pour les mediums
                               P2->OUT = LED_2;
                           } else {
                               // Allumer LED1 pour les aigus
                               P2->OUT = LED_1;
                           }
*/
                         //  printf("Max Value: %d, Max Index: %d, Max Fr: %f\n", maxValue, maxIndex,dominantFrequency );







    }
}

// Calculer le rapport cyclique en fonction de la fréquence et du seuil
uint32_t calculateDutyCycle(float frequency, float threshold)
{
    if (frequency >= threshold)
        return 1000 - 1; // Rapport cyclique maximal
    else
        return (frequency / threshold) * 1000; // Rapport cyclique proportionnel
}

// Fonction pour mettre à jour le PWM d'une LED spécifique
void updateLEDPWM(uint32_t led, uint32_t dutyCycle)
{
    // Assurez-vous que le dutyCycle ne dépasse pas la valeur maximale
    if (dutyCycle > 1000) {
        dutyCycle = 1000;
    }

    // Convertissez dutyCycle en un nombre compris entre 0 et la période du Timer_A
    uint32_t timerCount = (dutyCycle * TIMER_A0->CCR[0]) / 1000;

    // Mettez à jour la configuration PWM pour la LED spécifiée
    if (led == LED_1)
    {
        TIMER_A0->CCR[1] = timerCount; // Supposons que LED_1 est connectée à CCR[1]
    }
    else if (led == LED_2)
    {
        TIMER_A0->CCR[2] = timerCount; // Supposons que LED_2 est connectée à CCR[2]
    }
    else if (led == LED_3)
    {
        TIMER_A0->CCR[3] = timerCount; // Supposons que LED_3 est connectée à CCR[3]
    }
}





/* Completion interrupt for ADC14 MEM0 */
void DMA_INT1_IRQHandler(void)
{
    /* Switch between primary and alternate bufferes with DMA's PingPong mode */
    if(DMA_getChannelAttribute(7) & UDMA_ATTR_ALTSELECT)
    {
        DMA_setChannelControl(
            UDMA_PRI_SELECT | DMA_CH7_ADC14,
            UDMA_SIZE_16 | UDMA_SRC_INC_NONE |
            UDMA_DST_INC_16 | UDMA_ARB_1);
        DMA_setChannelTransfer(UDMA_PRI_SELECT | DMA_CH7_ADC14,
                               UDMA_MODE_PINGPONG, (void*) &ADC14->MEM[0],
                               data_array1, SAMPLE_LENGTH);
        switch_data = 1;
    }
    else
    {
        DMA_setChannelControl(
            UDMA_ALT_SELECT | DMA_CH7_ADC14,
            UDMA_SIZE_16 | UDMA_SRC_INC_NONE |
            UDMA_DST_INC_16 | UDMA_ARB_1);
        DMA_setChannelTransfer(UDMA_ALT_SELECT | DMA_CH7_ADC14,
                               UDMA_MODE_PINGPONG, (void*) &ADC14->MEM[0],
                               data_array2, SAMPLE_LENGTH);
        switch_data = 0;
    }
}








